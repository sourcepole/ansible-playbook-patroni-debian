- name: Configure Hetzner FailoverIP credentials
  copy:
    content: |
        # Failover IP
        ip={{ vip }}
        # Webservice-Login (https://robot.your-server.de/preferences)
        user='{{ vip_manager_hetzner_user }}'
        pass='{{ vip_manager_hetzner_pass }}'
    dest: /etc/hetzner
    mode: go-rw
  when: vip_manager_hetzner_type == "hetzner"
  notify: restart vip-manager
  
- name: Configure Hetzner FloatingIP credentials
  copy:
    content: |
        # Failover IP
        # ip={{ vip }}
        # Webservice-Login (https://robot.your-server.de/preferences)
        tokn='{{ vip_manager_hetzner_tokn }}'
        # retrieve ipid with `curl -H "Authorization: Bearer $tokn" 'https://api.hetzner.cloud/v1/floating_ips'`
        ipid='{{ vip_manager_hetzner_ipid }}'
        # retrieve serv id with `curl -H "Authorization: Bearer $tokn" 'https://api.hetzner.cloud/v1/servers'`
        serv='{{ vip_manager_hetzner_serv }}'
    dest: /etc/hetzner
    mode: go-rw
  when: vip_manager_hetzner_type == "hetzner_floating_ip"
  notify: restart vip-manager
  
- name: check whether systemd-networkd is running
  shell: systemctl is-active --quiet systemd-networkd
  check_mode: no # always execute
  changed_when: false # doesn't change anything
  failed_when: false # doesn't fail
  register: systemd_networkd

# network config via /etc/network/interfaces.d/
#
- name: Add VIP interface config à la Hetzner
  template:
    src: vip-if.cfg
    dest: /etc/network/interfaces.d/vip.cfg
  register: vip_interface
  when: systemd_networkd.rc != 0

- name: Reload VIP interface
  command: "ifup --force {{ ansible_default_ipv4.interface }}:1"
  when: vip_interface.changed

# network config via systemd-networkd
- name: Add VIP interface config à la Hetzner
  blockinfile:
    path: "{{ systemd_networkd_config_file }}"
    marker: "# {mark} VIP ANSIBLE MANAGED BLOCK"
    block: |
      #Failover IP
      [Address]
      Address={{ vip }}/32
  register: vip_interface
  when: systemd_networkd.rc == 0

- name: Reload VIP interface
  command: "networkctl reload"
  when: vip_interface.changed

